<?xml version="1.0"  encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="SLACloud-Perf-Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-s3\1.12.181\aws-java-sdk-s3-1.12.181.jar,C:\Users\g3udkk\.m2\repository\com\amazonaws\amazon-sqs-java-messaging-lib,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-core,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-kms,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-lambda,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-pom,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-rds,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-s3,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-secretsmanager,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-sns,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-ssm,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-stepfunctions,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-sts,C:\Users\g3udkk\.m2\repository\com\amazonaws\jmespath-java,C:\Users\g3udkk\.m2\repository\com\fanniemae\aws\sts\1.7\sts-1.7.jar,C:\Users\g3udkk\Downloads\test-automation-core-1.6-20220620.054836-890.jar,C:\Users\g3udkk\.m2\repository\antlr,C:\Users\g3udkk\.m2\repository\aopalliance,C:\Users\g3udkk\.m2\repository\asm,C:\Users\g3udkk\.m2\repository\backport-util-concurrent,C:\Users\g3udkk\.m2\repository\cglib,C:\Users\g3udkk\.m2\repository\ch,C:\Users\g3udkk\.m2\repository\classworlds,C:\Users\g3udkk\.m2\repository\com,C:\Users\g3udkk\.m2\repository\commons-beanutils,C:\Users\g3udkk\.m2\repository\commons-cli,C:\Users\g3udkk\.m2\repository\commons-codec,C:\Users\g3udkk\.m2\repository\commons-collections,C:\Users\g3udkk\.m2\repository\commons-configuration,C:\Users\g3udkk\.m2\repository\commons-dbcp,C:\Users\g3udkk\.m2\repository\commons-digester,C:\Users\g3udkk\.m2\repository\commons-fileupload,C:\Users\g3udkk\.m2\repository\commons-io,C:\Users\g3udkk\.m2\repository\commons-jxpath,C:\Users\g3udkk\.m2\repository\commons-lang,C:\Users\g3udkk\.m2\repository\commons-logging,C:\Users\g3udkk\.m2\repository\commons-net,C:\Users\g3udkk\.m2\repository\commons-pool,C:\Users\g3udkk\.m2\repository\de,C:\Users\g3udkk\.m2\repository\dev,C:\Users\g3udkk\.m2\repository\dnsjava,C:\Users\g3udkk\.m2\repository\dom4j,C:\Users\g3udkk\.m2\repository\info,C:\Users\g3udkk\.m2\repository\io,C:\Users\g3udkk\.m2\repository\jakarta,C:\Users\g3udkk\.m2\repository\javatar,C:\Users\g3udkk\.m2\repository\javax,C:\Users\g3udkk\.m2\repository\jaxen,C:\Users\g3udkk\.m2\repository\joda-time,C:\Users\g3udkk\.m2\repository\junit,C:\Users\g3udkk\.m2\repository\log4j,C:\Users\g3udkk\.m2\repository\mx4j,C:\Users\g3udkk\.m2\repository\net,C:\Users\g3udkk\.m2\repository\ognl,C:\Users\g3udkk\.m2\repository\oracle,C:\Users\g3udkk\.m2\repository\org,C:\Users\g3udkk\.m2\repository\pl,C:\Users\g3udkk\.m2\repository\sas,C:\Users\g3udkk\.m2\repository\software,C:\Users\g3udkk\.m2\repository\stax,C:\Users\g3udkk\.m2\repository\velocity-tools,C:\Users\g3udkk\.m2\repository\xalan,C:\Users\g3udkk\.m2\repository\xerces,C:\Users\g3udkk\.m2\repository\xml-apis,C:\Users\g3udkk\.m2\repository\xmlpull,C:\Users\g3udkk\.m2\repository\xmlunit,C:\Users\g3udkk\.m2\repository\xpp3,C:\Users\g3udkk\AppData\Local\apache-jmeter-5.4.1\bin\zscaller.jks,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-logs\1.12.181,C:\Users\g3udkk\zscaller.jks,C:\Users\g3udkk\saml.properties,C:\Users\g3udkk\.m2\repository\com\amazonaws\aws-java-sdk-ssm\1.12.177\aws-java-sdk-ssm-1.12.177.jar,C:\Users\g3udkk\.m2\repository\org\codehaus\jettison\jettison\1.5.0\jettison-1.5.0.jar,C:\Users\g3udkk\AppData\Local\apache-jmeter-5.4.1\bin\mfcs_cloud_sla_perf-0.0.1-SNAPSHOT.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SLAThread-Inbound Event" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">2</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Inbound_Event_Requests" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.fanniemae.mfcs_cloud_sla.steps.SLASqsPerfSteps;
import com.fanniemae.mfcs_cloud_sla.util.EnvUtils;
import com.fanniemae.mfcs_cloud_sla.handler.CommonHandler;
import com.fanniemae.mfcs_cloud_sla.util.AwsSqsMessagePublisher;
import com.fanniemae.mfcs_cloud_sla.util.AwsUtil;
import java.security.KeyStore;
import javax.net.ssl.SSLContext;
import java.util.Properties;
import com.fanniemae.access.sts.AWSFederationAccess;
import com.amazonaws.ClientConfiguration;
import com.amazonaws.Protocol;
import com.amazonaws.SDKGlobalConfiguration;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicSessionCredentials;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagement;
import com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagementClientBuilder;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.ssl.SSLContexts;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
import com.amazonaws.services.sqs.model.MessageAttributeValue;
import com.amazonaws.services.sqs.model.SendMessageRequest;
import com.amazonaws.services.sqs.model.SendMessageResult;
import com.fanniemae.mfcs_cloud_sla.handler.CommonHandler;
import com.fanniemae.mfcs_cloud_sla.util.AwsUtil;

Properties config = new Properties();

EnvUtils envUt= new EnvUtils();
       
envUt.setEnvType(&quot;test&quot;);

//log.info(System.getProperty(&quot;user.dir&quot;);

SLASqsPerfSteps stp= new SLASqsPerfSteps();
stp.setInputPayloadDataForFlexInbound(&quot;SE_BADM.SC_DSLV&quot;, &quot;Set2TerminatedSecurityDessolved.xml&quot;);
stp.Inb_publishToSQSWithCredSession(&quot;SE_BADM.SC_DSLV&quot;, &quot;Security&quot;);
log.info(envUt.getEnvType());

log.info(&quot;Payload Msg ID: &quot; +stp.getPayloadInbMessageIdInSteps());
log.info(&quot;Meta Msg ID: &quot; +stp.getMetaInbMessageIdInSteps());


vars.put(&quot;PAYLOAD_MSGID&quot;,stp.getPayloadInbMessageIdInSteps());

//log.info(&quot;Host: &quot;+awt.getClientConfig().getProxyHost());
//log.info(sqs.getOutSQSQueueUrl());

//log.info(&quot;Session-ID: &quot;+sqs.getSessionCred());
//log.info(&quot;SecretID: &quot;+ sqs.getSecretCred());
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Fetch_Inbound_EventID_FromDB" enabled="true">
            <stringProp name="dataSource">SLAJDBC</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">SELECT EVNT_ID FROM &quot;GPF&quot;.EVNT WHERE MSG_ID in(&apos;${PAYLOAD_MSGID}&apos;) </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">EVNT_ID</stringProp>
            <stringProp name="resultVariable">result</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Save_EventID_In_Variable" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.util.ArrayList;

ArrayList myList = new ArrayList();

      ArrayList result = vars.getObject(&quot;result&quot;);

       log.info(&quot;result: &quot; +result);
       log.info(&quot;result.size(): &quot; +result.size());
     int waitcounter = 1;
   //  log.info(&quot;countdown: &quot; +countdown);
        while (result.size()==0){
            log.info(&quot;****Result DATA is ZERO******WAITING&quot;);
            log.info(&quot;waitcounter: &quot; +waitcounter);
            ++waitcounter;
            Thread.sleep(100);
           if (waitcounter&gt;10)
            {
            	log.error(&quot;waitcounter is more than 10: &quot; +waitcounter);
//             prev.setSuccessful(false);
//             prev.setStopTest(true)
       //      System.exit(1);
             
            }
            ArrayList result = vars.getObject(&quot;result&quot;);	
        }


  ArrayList result = vars.getObject(&quot;result&quot;);

for (HashMap table : result) {
    for (Object column : table.keySet()) {
        log.info(column + &quot;=&quot; + table.get(column));
        myList.add(table.get(column));
    }
}
 //Thread.sleep(3000);
    log.info(&quot;Payload Event ID: &quot; +myList.get(0));
   // vars.put(&quot;EventId&quot;, myList.get(0));
//
  
    vars.put(&quot;EventId&quot;, myList.get(0).toString());

//    for(int i=1;i&lt;=str.length;i++)
//{
//    vars.put(&quot;myVar_&quot; + i, str[i]);
//}</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validate_EventID_In_Result_DB_Table" enabled="true">
            <stringProp name="dataSource">SLAJDBC</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT EVNT_ID FROM &quot;GPF&quot;.EVNT_RSLT WHERE EVNT_ID in (&apos;${EventId}&apos;)  AND RSLT_TYP IN (&apos;SLARecon&apos;) </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">String evntId = vars.get(&quot;EventId&quot;);

  if (evntId !=null) {
        Failure = false;
        log.info(&quot;evntId =&quot; + evntId);
    } else {
     Failure = true;
        FailureMessage = &quot;evntId value should not be Null...actual is : &quot; + evntId;
    }</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\g3udkk\AppData\Local\apache-jmeter-5.4.1\bin\Result\Aggregate.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">C:\Users\g3udkk\AppData\Local\apache-jmeter-5.4.1\bin\Result\Summary.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="false">
          <stringProp name="WhileController.condition">if(result==null)</stringProp>
        </WhileController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
          <stringProp name="IfController.condition"></stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
          <stringProp name="dataSource">SLAJDBC</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT EVNT_ID FROM &quot;GPF&quot;.EVNT WHERE MSG_ID in(&apos;${PAYLOAD_MSGID}&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">SLAJDBC</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://sla-clu-slards1.cluster-cglnovkyzphk.us-east-1.rds.amazonaws.com:5432/sla1</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">2</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">80000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">sla_test</stringProp>
      </JDBCDataSource>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
